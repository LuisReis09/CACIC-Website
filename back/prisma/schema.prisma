// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Professor {
  id               Int         @id @default(autoincrement())
  nome             String
  email            String
  sala             String
  departamento     String
  areasDeInteresse String
  laboratorios     String
  disciplinas      String
  linkedin         String
  imagem           String
  feedbacks        Feedback[]
  monitorias       Monitoria[]
  votantes         Votante[]
}

// Guarda 1 linha de feedback por professor, reduzindo o custo computacional
model Feedback {
  id           Int       @id @default(autoincrement())
  didatica     Float
  planejamento Float
  avaliacoes   Float
  cordialidade Float
  qtdFeedbacks Int
  professorId  Int
  professor    Professor @relation(fields: [professorId], references: [id])
}

// Guarda quem ja votou/deu feedback
model Votante {
  id          Int       @id @default(autoincrement())
  cpf         String
  professorId Int
  professor   Professor @relation(fields: [professorId], references: [id])
}

model Monitoria {
  id           Int       @id @default(autoincrement())
  monitores    String
  emailMonitor String
  disciplina   String
  linkDiscord    String
  linkWhatsapp   String
  status         String @default("PENDENTE_APROVACAO")
  professorId  Int
  professor    Professor @relation(fields: [professorId], references: [id])
}

model Admin {
  id    Int    @id @default(autoincrement())
  login String @unique
  senha String
  servicoJogosAtivo Boolean @default(false)
}

model Jogo {
  id           Int        @id @default(autoincrement())
  nome         String
  precoPorHora Float
  imagem       String
  status       StatusJogo
  alugueis     Aluguel[]
}

enum StatusJogo {
  DISPONIVEL
  INDISPONIVEL
  ALUGADO
}

model Cliente {
  id             Int       @id @default(autoincrement())
  cpf            String    @unique
  nome           String
  email          String    @unique
  contato        String
  bloqueado      Boolean
  motivoBloqueio String?
  dataBloqueio   DateTime?
  alugueis       Aluguel[]
}

model Aluguel {
  id         Int           @id @default(autoincrement())
  jogoId     Int
  jogo       Jogo          @relation(fields: [jogoId], references: [id])
  clienteId  Int
  cliente    Cliente       @relation(fields: [clienteId], references: [id])
  horaInicio Int
  horaFim    Int
  status     StatusAluguel @default(PENDENTE_APROVACAO)
}

enum StatusAluguel {
  PENDENTE_APROVACAO
  RESERVADO
  INICIADO
  FINALIZADO
  CANCELADO
}

model Laboratorio {
  id      Int @id @default(autoincrement())
  nome    String
  link    String
  localizacao     String
  descricao       String
  imagem          String
}